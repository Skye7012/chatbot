import streamlit as st
from PIL import Image
import numpy as np
import torch
from torchvision import transforms

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üé® AI-–•—É–¥–æ–∂–Ω–∏–∫: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤")

# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –∞–Ω–∏–º–µ)
style = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ö—É–¥–æ–∂–Ω–∏–∫–∞:",
    ("–í–∞–Ω –ì–æ–≥", "–ú—É–Ω–∫", "–ü–∏–∫–∞—Å—Å–æ", "–ú–æ–Ω–µ")
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:", type=["jpg", "jpeg"])


@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å AnimeGANv2 –∏–∑ torchhub"""
    model = torch.hub.load('bryandlee/animegan2-pytorch', 'generator').eval()
    return model


def stylize_image(image, model):
    """–ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é"""
    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.ToTensor(),
    ])
    input_tensor = preprocess(image).unsqueeze(0)
    with torch.no_grad():
        output = model(input_tensor)
    output_image = output.squeeze().permute(1, 2, 0).numpy()
    output_image = np.clip(output_image, 0, 1)
    return (output_image * 255).astype(np.uint8)


if uploaded_file is not None:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(uploaded_file)
    st.image(image, caption="–í–∞—à–µ —Ñ–æ—Ç–æ", use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç–∏–ª—å " + style):
        st.write("‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–∫–µ—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
            model = load_model()

            # –°—Ç–∏–ª–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            stylized_image = stylize_image(image, model)
            st.image(stylized_image,
                     caption=f"–°—Ç–∏–ª—å: {style}", use_container_width=True)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            st.subheader("–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?")
            feedback = st.text_area("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:")
            if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'):
                if feedback:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–µ –ø—É—Å—Ç–æ–π
                    with open('feedback.txt', 'a') as f:
                        f.write(f"–°—Ç–∏–ª—å: {style}\n–û—Ç–∑—ã–≤: {feedback}\n\n")
                    st.success('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
            st.warning("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
